data$province <- as.factor(data$price)
# radi samo sa faktorskim i numerickim ako imaju normalnu raspodelu
data <- read.csv("wines.csv", stringsAsFactors = F)
data$X <- NULL
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
# price nam je protrebno pa bih tu vrednost zamenio sa medijanom ili srvr u zvisnosti od raspodele
# region i designation bih izbacio jer ima mnogo nedostajucih vrednosti
# country i province bih popunio sa najvecim brojem pojavljivanja ( ako nemaju bas previse razlicitih vrenosti)
# description bih takodje izbacio jer mislim da nije bitno za nas model
data$designation <- NULL
data$region <- NULL
data$description <- NULL
data$winery <- as.factor(data$winery)
data$variety <- as.factor(data$variety)
data$title <- as.factor(data$title)
data$province[data$province == ""] <- NA
data$province <- as.factor(data$province)
length(levels(data$province))
prop.table(table(data$province))
table(data$province)
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
data$country[data$country == ""] <- NA
data$country <- as.factor(data$country)
length(levels(data$country))
table(data$country)
data$country[is.na(data$country)] <- "US"
apply(data, 2, function(x) sum(is.na(x)))
# ovde videti sta uraditi mozda samo izbaciti redove gde je province NA
data[is.na(data$province), ] <- NULL
# ovde videti sta uraditi mozda samo izbaciti redove gde je province NA
data <- data[!is.na(data$province), ]
apply(data, 2, function(x) sum(is.na(x)))
# radi samo sa faktorskim i numerickim ako imaju normalnu raspodelu
data <- read.csv("wines.csv", stringsAsFactors = F)
data$X <- NULL
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
# price nam je protrebno pa bih tu vrednost zamenio sa medijanom ili srvr u zvisnosti od raspodele
# region i designation bih izbacio jer ima mnogo nedostajucih vrednosti
# country i province bih popunio sa najvecim brojem pojavljivanja ( ako nemaju bas previse razlicitih vrenosti)
# description bih takodje izbacio jer mislim da nije bitno za nas model
data$designation <- NULL
data$region <- NULL
data$description <- NULL
data$winery <- as.factor(data$winery)
data$variety <- as.factor(data$variety)
data$title <- as.factor(data$title)
data$province[data$province == ""] <- NA
data$province <- as.factor(data$province)
length(levels(data$province))
table(data$province)
# ovde videti sta uraditi mozda samo izbaciti redove gde je province NA
data <- data[!is.na(data$province), ]
data$country[data$country == ""] <- NA
data$country <- as.factor(data$country)
length(levels(data$country))
table(data$country) # zamenicu sa US
data$country[is.na(data$country)] <- "US"
data <- read.csv("wines.csv", stringsAsFactors = F)
data <- subset(data, (country == "France"| country == "Argentina"| country == "Italy"))
clear()
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
data$designation <- NULL
data$X <- NULL
data$region <- as.factor(data$region)
data$winery <- as.factor(data$winery)
data$variety <- as.factor(data$variety)
data$title <- as.factor(data$title)
data$province <- as.factor(data$province)
data$country <- as.factor(data$country)
data$description <- as.factor(data$description)
apply(data, 2, function(x) length(levels(x)))
apply(data[1,2,5:9], 2, function(x) length(levels(x)))
apply(data[, 1,2,5:9], 2, function(x) length(levels(x)))
apply(data[, c(1,2,5:9)], 2, function(x) length(levels(x)))
length(levels(title))
apply(data[, c(1,2,5:9)], 2, function(x) length(levels(data$x)))
length(levels(data$title))
data$title <- NULL
length(levels(data$description))
data$description <- NULL
length(levels(data$winery))
data$winery <- NULL
# ja ova dva mozda ne bih uklanjao
length(levels(data$region))
data$region <- NULL
length(levels(data$variety))
data$variety <- NULL
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
shapiro.test(data$price, na.rm = T)
shapiro.test(data$price)
# nema normalnu raspodelu
data$price[is.na(data$price)] <- median(data$price, na.rm = T)
data$points <- as.numeric(data$points)
q1 <- quantile(data$price, 0.25)
data$price_category <- ifelse(data$price <= q1, "cheap", "not_cheap")
data$price_category <- factor(data$price_category, c("cheap", "not_cheap"))
data$price <- NULL
shapiro.test(data$points)
library(bnlearn)
discretized <- discretize(as.numeric(data$points),
method = "quantile",
breaks = c(5))
discretized <- discretize(data = as.numeric(data$points),
method = "quantile",
breaks = c(5))
discretized <- discretize(data = as.data.frame(data$points),
method = "quantile",
breaks = c(5))
View(discretized)
discretized
length(unique(discretized))
length(levels(discretized))
length(levels(discretized$`data$points`))
library(ggplot2)
ggplot(data, aes(x = points)) + geom_histogram()
summary(discretized)
newData <- as.data.frame(cbind(discretized, data[,c(1,3,4)]))
rm(discretized)
rm(data)
# izmena imena
newData$points <- newData$`data$points`
newData$`data$points` <- NULL
newData <- newData[, c(4,1,2,3)]
set.seed(1010)
indexes <- createDataPartition(newData$price_category, p = 0.8, list = FALSE)
library(caret)
set.seed(1010)
indexes <- createDataPartition(newData$price_category, p = 0.8, list = FALSE)
train.data <- newData[indexes, ]
test.data <- newData[-indexes, ]
library(e1071)
nb <- naiveBayes(price_category ~ .,
data = train.data)
nb
nb1 <- naiveBayes(price_category ~ .,
data = train.data)
nb1
rm(nb)
nb1.pred <- predict(object = nb1,
newdata = test.data,
type = "class") # moze i raw za raw podatke i moze se podesiti treshhold
nb1.pred
head(nb1.pred)
nb1.pred <- predict(object = nb1,
newdata = test.data,
type = "raw") # moze i raw za raw podatke i moze se podesiti treshhold
head(nb1.pred)
View(nb1)
nb1.pred <- predict(object = nb1,
newdata = test.data,
type = "class") # moze i raw za raw podatke i moze se podesiti treshhold
head(nb1.pred)
head(nb1.pred, 10)
head(nb1.pred)
nb1.cm <- table( actual = test.data$price_category, predicted = nb1.pred)
nb1.cm
library(caret)
set.seed(10)
indexes <- createDataPartition(newData$price_category, p = 0.8, list = FALSE)
train.data <- newData[indexes, ]
test.data <- newData[-indexes, ]
library(e1071)
nb1 <- naiveBayes(price_category ~ .,
data = train.data)
nb1
nb1.pred <- predict(object = nb1,
newdata = test.data,
type = "class") # moze i raw za raw podatke i moze se podesiti treshhold
head(nb1.pred)
nb1.cm <- table( actual = test.data$price_category, predicted = nb1.pred)
nb1.cm
calculateEvalMetrics <- function(cm){
TP <- cm[1,1]
FP <- cm[2,1]
TN <- cm[2,2]
FN <- cm[1,2]
accuracy <- sum(diag(cm)) / sum(cm)
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
F1 <- (2 * precision * recall) / (precision + recall)
}
nb1.eval <- calculateEvalMetrics(nb1.cm)
nb1.eval
calculateEvalMetrics <- function(cm){
TP <- cm[1,1]
FP <- cm[2,1]
TN <- cm[2,2]
FN <- cm[1,2]
accuracy <- sum(diag(cm)) / sum(cm)
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
F1 <- (2 * precision * recall) / (precision + recall)
c( Accuracu = accuracy, Precision = precision, Recall = recall, F1 = F1)
}
nb1.eval <- calculateEvalMetrics(nb1.cm)
nb1.eval
nb1.pred.prob <- predict(object = nb1,
newdata = test.data,
type = "raw")
head(nb1.pred.prob)
library(pROC)
params <- roc(response = test.data$price_category,
predictor = nb1.pred.prob[, 1])
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr", ...),
x = "local maximas")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
coords
max(coords$accuracy)
params <- roc(response = as.numeric(test.data$price_category),
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params$auc
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
max(coords$accuracy)
coords$accuracy
library(pROC)
params <- roc(response = test.data$price_category,
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params <- roc(response = as.numeric(test.data$price_category),
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
coords$accuracy
coords
treshold <- coords[19,4]
treshold
params <- roc(response = as.integer(test.data$price_category),
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
coords
treshold <- coords[19,4]
treshold
params <- roc(response = test.data$price_category,
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params <- roc(response = as.numeric(test.data$price_category),
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
coords
treshold <- coords[19,4]
treshold
View(nb1.pred.prob)
# radi samo sa faktorskim i numerickim ako imaju normalnu raspodelu
# one koje nemaju moraju da se diskretizuju
data <- read.csv("wines.csv", stringsAsFactors = F)
data$X <- NULL
data <- subset(data, (country == "France"| country == "Argentina"| country == "Italy"))
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(x == "", na.rm = T))
apply(data, 2, function(x) sum(x == " ", na.rm = T))
apply(data, 2, function(x) sum(x == "-", na.rm = T))
# price nam je protrebno pa bih tu vrednost zamenio sa medijanom ili srvr u zvisnosti od raspodele
# designation bih izbacio jer ima mnogo nedostajucih vrednosti
data$designation <- NULL
data$winery <- as.factor(data$winery)
data$variety <- as.factor(data$variety)
data$title <- as.factor(data$title)
data$region <- as.factor(data$region)
data$province <- as.factor(data$province)
data$country <- as.factor(data$country)
data$description <- as.factor(data$description)
length(levels(data$title))
data$title <- NULL
length(levels(data$description))
data$description <- NULL
length(levels(data$winery))
data$winery <- NULL
# ja ova dva mozda ne bih uklanjao
length(levels(data$region))
data$region <- NULL
length(levels(data$variety))
data$variety <- NULL
shapiro.test(data$price)
# nema normalnu raspodelu
data$price[is.na(data$price)] <- median(data$price, na.rm = T)
data$points <- as.numeric(data$points)
q1 <- quantile(data$price, 0.25)
data$price_category <- ifelse(data$price <= q1, "cheap", "not_cheap")
data$price_category <- factor(data$price_category, c("cheap", "not_cheap"))
data$price <- NULL
shapiro.test(data$points)
# nema normalnu raspodelu pa mora da se diskretizuje
# ovo nije obavezno nego cisto eto onako
library(ggplot2)
ggplot(data, aes(x = points)) + geom_histogram()
library(bnlearn)
?discretize()
discretized <- discretize(data = as.data.frame(data$points),
method = "quantile",
breaks = c(5))
summary(discretized)
newData <- as.data.frame(cbind(discretized, data[,c(1,3,4)]))
rm(discretized)
rm(data)
# izmena imena
newData$points <- newData$`data$points`
newData$`data$points` <- NULL
newData <- newData[, c(4,1,2,3)]
library(caret)
set.seed(10)
indexes <- createDataPartition(newData$price_category, p = 0.8, list = FALSE)
train.data <- newData[indexes, ]
test.data <- newData[-indexes, ]
library(e1071)
nb1 <- naiveBayes(price_category ~ .,
data = train.data)
nb1
nb1.pred <- predict(object = nb1,
newdata = test.data,
type = "class") # moze i raw za raw podatke i moze se podesiti treshhold
head(nb1.pred)
nb1.cm <- table( actual = test.data$price_category, predicted = nb1.pred)
nb1.cm
calculateEvalMetrics <- function(cm){
TP <- cm[1,1]
FP <- cm[2,1]
TN <- cm[2,2]
FN <- cm[1,2]
accuracy <- sum(diag(cm)) / sum(cm)
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
F1 <- (2 * precision * recall) / (precision + recall)
c( Accuracu = accuracy, Precision = precision, Recall = recall, F1 = F1)
}
nb1.eval <- calculateEvalMetrics(nb1.cm)
nb1.eval
# racunanje tresholda
nb2.pred.prob <- predict(object = nb1,
newdata = test.data,
type = "raw")
head(nb1.pred.prob)
head(nb2.pred.prob)
library(pROC)
params <- roc(response = as.numeric(test.data$price_category),
predictor = nb1.pred.prob[, 1],
levels = c(2,1))
nb2.pred.prob <- predict(object = nb1,
newdata = test.data,
type = "raw")
head(nb2.pred.prob)
library(pROC)
params <- roc(response = as.numeric(test.data$price_category),
predictor = nb2.pred.prob[, 1],
levels = c(2,1))
params$auc
plot.roc(params,
print.thres = TRUE,
print.thres.best.method = "youden")
coords <- coords(params,
ret = c("accuracy", "spec", "sens", "thr"),
x = "local maximas")
coords
treshold <- coords[19,4]
treshold
nb2.pred <- ifelse()
nb2.pred <- ifelse(nb2.pred.prob >= treshold, "cheap", "not_cheap")
nb2.pred <- as.factor(nb2.pred)
nb2.cm <- table(actual = test.data$price_category, predicted = nb2.pred)
nb2.pred
View(nb2.pred.prob)
length(nb2.pred)
length(nb2.pred.prob)
View(nb2.pred.prob)
nb2.pred <- ifelse(nb2.pred.prob[, 1] >= treshold, "cheap", "not_cheap")
nb2.pred <- as.factor(nb2.pred)
nb2.pred
length(nb2.pred)
nb2.cm <- table(actual = test.data$price_category, predicted = nb2.pred)
nb2.cm
nb2.eval <- calculateEvalMetrics(nb2.cm)
nb2.eval
rbind(nb1.eval, nb2.eval)
# RADI SA FAKTOR VARIJABLAMA!
# RADI I SA NUMERICKIM AKO IMAJU NORMALNU RASPODELU,
# A AKO NEMAJU, MORAJU DA SE DISKRETIZUJU!
# POSTOJE 2 VRSTE DISKRETIZACIJE:
# 1. DISKRETIZACIJA U INTERVALE JEDNAKE DUZINE (intervalna diskretizacija)
# 2. DISKRETIZACIJA U INTERVALE ISTE FREKVENCIJE (kvantilna diskretizacija)
# kvantilna obicno daje bolje rezultate, pa cemo nju ovde koristiti
data <- read.csv("wines.csv", stringsAsFactors = FALSE)
str(data)
# ovaj dataframe sam morao sam da popravim jer nemamo konkretan CSV fajl
# R iz nekog razloga dodaje kolonu X koja oznacava redni broj observacije
# pokusao sam da izbrisem, ali neuspesno
# zbog toga radim sledecu liniju koda, da izbacim to X odmah, pa normalno radimo zadatak
data$X <- NULL
str(data)
dataSub <- subset(data, (country == "France" | country == "Argentina" | country == "Italy"))
summary(dataSub)
apply(dataSub, MARGIN = 2, FUN = function(x) sum(is.na(x)))
apply(dataSub, MARGIN = 2, FUN = function(x) sum(x == "-", na.rm = T))
apply(dataSub, MARGIN = 2, FUN = function(x) sum(x == "", na.rm = T))
apply(dataSub, MARGIN = 2, FUN = function(x) sum(x == " ", na.rm = T))
# Designation ima 1065 praznih stringova, region ima 9
# nijedna varijabla nema '-'
# Price ima 39 NA vrednosti i te redove moramo ukloniti
# jer se od varijable Price kreira izlazna varijabla Price_Category
# izbacujemo sve observacije sa nepoznatom varijablom Price
dataSub <- dataSub[complete.cases(dataSub[,5]),]
length(unique(dataSub$designation))
# posto designation ima 1859 razlicitih vrednosti, a ukupan broj observacija
# je 3388 nema poente da je pretvorimo u faktor zato cemo je ukloniti
dataSub$designation <- NULL
length(unique(dataSub$region))
# ima 458 sto je mnogo za faktor varijablu, pa i region takodje brisemo
dataSub$region <- NULL
dataSub$description <- NULL # description nema uticaja na dalje analze jer ne utice na cenu
# Country ima samo 3 razlicite vrednosti, jer smo od toga rekli da nam se sastoji subset
# pa cemo je pretvoriti u faktor
dataSub$country <- factor(dataSub$country)
levels(dataSub$country)
length(unique(dataSub$title))
# Title takodje ima previse razlicitih vrednosti, pa i njega uklanjamo
dataSub$title <- NULL
length(unique(dataSub$province))
# 23 nivoa, mozemo da ostavimo
dataSub$province <- as.factor(dataSub$province)
str(dataSub)
length(unique(dataSub$variety))
# variety takodje ima previse razlicitih vrednosti, pa i njega uklanjamo
dataSub$variety <- NULL
length(unique(dataSub$winery))
# winery takodje ima previse razlicitih vrednosti, pa i njega uklanjamo
dataSub$winery <- NULL
str(dataSub)
# proveravamo kakvu raspodelu ima Price jer ima NA vrednosti
# da vidimo da li menjamo sa MEAN ili MEDIAN
shapiro.test(dataSub$price)
# nema normalnu raspodelu menjamo medijanom
medianPrice <- median(dataSub$price, na.rm = TRUE)
dataSub$price[is.na(dataSub$price)] <- medianPrice
str(dataSub)
prviKvartil <- quantile(dataSub$price, 0.25)
prviKvartil
dataSub$price_category <- ifelse(dataSub$price <= prviKvartil,
yes = "cheap", no = "not_cheap")
# price nam sada vise nije potrebna jer smo napravili izlaznu
# price category
dataSub$price <- NULL
dataSub$price_category <- factor(dataSub$price_category)
str(dataSub)
# zavrsili smo sa sredjivanjem podataka, sada radimo diskretizaciju numerickih varijabli
# ako nemaju normalnu raspodelu,
# pravimo train i test setove i pravimo model
shapiro.test(dataSub$points)
# Nema normalnu raspodelu, pa radimo diskretizaciju !
# vidimo koliko vinarija upada u neki opseg poena
# ovo nije toliko bitno za ispit
library(ggplot2)
ggplot(dataSub, aes(x = points)) + geom_histogram()
dataSub$points <- as.numeric(dataSub$points)
points <- dataSub$points
points.df <- as.data.frame(points)
discretized <- discretize(data = points.df,
method = "quantile",
breaks = c(5))
# install.packages("bnlearn")
library(bnlearn)
discretized <- discretize(data = points.df,
method = "quantile",
breaks = c(5))
summary(discretized)
newData <- as.data.frame(cbind(dataSub[,c(1,3,4)], discretized))
View(newData)
